<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fish School Simulation</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background-color: #1E3A5F; /* Dark blue ocean theme */
    }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
</head>
<body>

<script>
let fish = [];
const numFish = 300;

function setup() {
  createCanvas(windowWidth, windowHeight);
  for (let i = 0; i < numFish; i++) {
    fish.push(new Fish(random(width), random(height)));
  }
}

function draw() {
  background(30, 144, 255, 90); // Ocean blue with transparency

  for (let f of fish) {
    f.flock(fish);
    f.update();
    f.edges();
    f.show();
  }
}

class Fish {
  constructor(x, y) {
    this.position = createVector(x, y);
    this.velocity = p5.Vector.random2D().mult(random(1, 3));
    this.acceleration = createVector(0, 0);
    this.maxSpeed = 3;
    this.maxForce = 0.05;
    this.size = 6;
  }

  flock(fish) {
    let align = this.align(fish);
    let cohesion = this.cohere(fish);
    let separation = this.separate(fish);

    align.mult(1.0);
    cohesion.mult(0.8);
    separation.mult(1.2);

    this.acceleration.add(align);
    this.acceleration.add(cohesion);
    this.acceleration.add(separation);
  }

  align(fish) {
    let perceptionRadius = 50;
    let steering = createVector();
    let total = 0;
    for (let other of fish) {
      if (other !== this && this.position.dist(other.position) < perceptionRadius) {
        steering.add(other.velocity);
        total++;
      }
    }
    if (total > 0) {
      steering.div(total);
      steering.setMag(this.maxSpeed);
      steering.sub(this.velocity);
      steering.limit(this.maxForce);
    }
    return steering;
  }

  cohere(fish) {
    let perceptionRadius = 50;
    let steering = createVector();
    let total = 0;
    for (let other of fish) {
      if (other !== this && this.position.dist(other.position) < perceptionRadius) {
        steering.add(other.position);
        total++;
      }
    }
    if (total > 0) {
      steering.div(total);
      steering.sub(this.position);
      steering.setMag(this.maxSpeed);
      steering.sub(this.velocity);
      steering.limit(this.maxForce);
    }
    return steering;
  }

  separate(fish) {
    let perceptionRadius = 25;
    let steering = createVector();
    let total = 0;
    for (let other of fish) {
      let d = this.position.dist(other.position);
      if (other !== this && d < perceptionRadius) {
        let diff = p5.Vector.sub(this.position, other.position);
        diff.div(d * d);
        steering.add(diff);
        total++;
      }
    }
    if (total > 0) {
      steering.div(total);
      steering.setMag(this.maxSpeed);
      steering.sub(this.velocity);
      steering.limit(this.maxForce);
    }
    return steering;
  }

  update() {
    this.velocity.add(this.acceleration);
    this.velocity.limit(this.maxSpeed);
    this.position.add(this.velocity);
    this.acceleration.mult(0);
  }

  edges() {
    let margin = 10;
    let turnStrength = 0.5;

    if (this.position.x < margin) this.velocity.x += turnStrength;
    if (this.position.x > width - margin) this.velocity.x -= turnStrength;
    if (this.position.y < margin) this.velocity.y += turnStrength;
    if (this.position.y > height - margin) this.velocity.y -= turnStrength;
  }

  show() {
    push();
    translate(this.position.x, this.position.y);
    rotate(this.velocity.heading());
    fill(255, 204, 0);
    noStroke();
    triangle(-this.size, -this.size / 2, -this.size, this.size / 2, this.size, 0);
    pop();
  }
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}
</script>

</body>
</html>
